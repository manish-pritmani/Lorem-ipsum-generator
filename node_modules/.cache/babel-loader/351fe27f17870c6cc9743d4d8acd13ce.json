{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\lorem-ipsum-generator\\\\src\\\\components\\\\Options.js\";\nimport React from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard'; //Everything we sent from option param in app.js is received here as props.\n\nconst Options = props => {\n  const {\n    includeHtml,\n    setIncludeHtml,\n    setInputValue,\n    setTag,\n    tag,\n    setCopiedCode,\n    copiedCode,\n    paragraphs\n  } = props;\n  setTimeout(() => {\n    setCopiedCode(false);\n  }, 2500); // Now we have access to all of the properties sent by App.js here in Options.js\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"options\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"optionsContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"paragraphs\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Paragraphs :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            min: \"1\",\n            max: \"50\",\n            defaultValue: \"1\",\n            onChange: e => setInputValue(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tags\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Tags :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            defaultValue: tag,\n            onChange: e => setTag(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"p\",\n              children: \"<p>\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"h1\",\n              children: \"<h1>\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"h2\",\n              children: \"<h2>\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"h3\",\n              children: \"<h3>\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"h4\",\n              children: \"<h4>\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"h5\",\n              children: \"<h5>\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"h6\",\n              children: \"<h6>\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"span\",\n              children: \"<span>\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"include\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Include HTML :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            defaultValue: includeHtml,\n            onChange: e => setIncludeHtml(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Yes\",\n              children: \"Yes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"No\",\n              children: \"No\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"copy\",\n        children: /*#__PURE__*/_jsxDEV(CopyToClipboard, {\n          text: paragraphs.map(sentence => includeHtml === \"Yes\" ? '<${tag}>${sentence}</${tag}>' : sentence),\n          onCopy: () => setCopiedCode(true),\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: copiedCode ? \"Copied Successfully\" : \"Copy to Clipboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Options;\nexport default Options; // &lt; for left arrow and &gt; for right arrow.\n// Input element above is given minimum and maximum through the element attributes.\n// onChange event is very important above.\n\nvar _c;\n\n$RefreshReg$(_c, \"Options\");","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/lorem-ipsum-generator/src/components/Options.js"],"names":["React","CopyToClipboard","Options","props","includeHtml","setIncludeHtml","setInputValue","setTag","tag","setCopiedCode","copiedCode","paragraphs","setTimeout","e","target","value","map","sentence"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\n\r\n//Everything we sent from option param in app.js is received here as props.\r\nconst Options = (props) => {\r\n    const {includeHtml,setIncludeHtml,setInputValue,setTag,tag,setCopiedCode,copiedCode,paragraphs} = props;\r\n\r\n    setTimeout(() =>{\r\n        setCopiedCode(false);\r\n    }, 2500);\r\n// Now we have access to all of the properties sent by App.js here in Options.js\r\n    return (\r\n        <div className=\"options\">\r\n            <div className=\"wrapper\">\r\n                <div className=\"optionsContainer\">\r\n                    <div className=\"paragraphs\">\r\n                        <p>Paragraphs :</p>\r\n                        <input\r\n                            type=\"number\"\r\n                            min=\"1\"\r\n                            max=\"50\"\r\n                            defaultValue = \"1\"\r\n                            onChange={(e)=> setInputValue(e.target.value)}\r\n                         />\r\n                    </div>\r\n                    <div className=\"tags\">\r\n                        <p>Tags :</p>\r\n                        <select\r\n                            defaultValue={tag}\r\n                            onChange={(e)=>setTag(e.target.value)}\r\n                        >\r\n                            <option value=\"p\">&lt;p&gt;</option>\r\n                            <option value=\"h1\">&lt;h1&gt;</option>\r\n                            <option value=\"h2\">&lt;h2&gt;</option>\r\n                            <option value=\"h3\">&lt;h3&gt;</option>\r\n                            <option value=\"h4\">&lt;h4&gt;</option>\r\n                            <option value=\"h5\">&lt;h5&gt;</option>\r\n                            <option value=\"h6\">&lt;h6&gt;</option>\r\n                            <option value=\"span\">&lt;span&gt;</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"include\">\r\n                        <p>Include HTML :</p>\r\n                        <select\r\n                            defaultValue={includeHtml}\r\n                            onChange={(e)=>setIncludeHtml(e.target.value)}\r\n                        >\r\n                        <option value=\"Yes\">Yes</option>\r\n                        <option value=\"No\">No</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"copy\">\r\n                     <CopyToClipboard\r\n                        text={paragraphs.map(sentence => includeHtml === \"Yes\"? '<${tag}>${sentence}</${tag}>' : sentence)}\r\n                        onCopy={()=>setCopiedCode(true)}\r\n                     >\r\n                          <button>{copiedCode?\"Copied Successfully\":\"Copy to Clipboard\"}</button>\r\n                     </CopyToClipboard>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Options;\r\n\r\n\r\n// &lt; for left arrow and &gt; for right arrow.\r\n// Input element above is given minimum and maximum through the element attributes.\r\n// onChange event is very important above."]},"metadata":{},"sourceType":"module"}