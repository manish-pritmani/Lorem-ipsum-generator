{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\lorem-ipsum-generator\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport Container from './components/Container';\nimport Title from './components/Title';\nimport Options from './components/Options';\n\nconst App = () => {\n  _s();\n\n  //  Defined all the states we needed in the project.\n  const [paragraphs, setParagraphs] = useState([]);\n  const [tag, setTag] = useState(\"p\");\n  const [inputValue, setInputValue] = useState(1);\n  const [includeHtml, setIncludeHtml] = useState(\"Yes\");\n  const [copiedCode, setCopiedCode] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Title, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Options, {\n      paragraphs: paragraphs,\n      copiedCode: copiedCode,\n      setCopiedCode: setCopiedCode,\n      setParagraphs: setParagraphs,\n      tags: tags,\n      setTag: setTag,\n      setInputValue: setInputValue,\n      includeHtml: includeHtml,\n      setIncludeHtml: setIncludeHtml\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"+rPT02NvVyPo1hPbF1v0fpm3vVc=\");\n\n_c = App;\nexport default App; //            While making container component we have made a parameter passing, which is title here and will be rendered like this\n//            <div className=\"container\">\n//            <div className=\"title\">\n//                <h1>Lorem Ipsum Generator</h1>\n//            </div>\n//            </div>\n//Single component is render with <component /> whereas parameterised/nested component is rendered as <component></component>\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/lorem-ipsum-generator/src/App.js"],"names":["React","useState","useEffect","Container","Title","Options","App","paragraphs","setParagraphs","tag","setTag","inputValue","setInputValue","includeHtml","setIncludeHtml","copiedCode","setCopiedCode","tags"],"mappings":";;;;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAClB;AACI,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACQ,GAAD,EAAMC,MAAN,IAAgBT,QAAQ,CAAC,GAAD,CAA9B;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACY,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACc,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,KAAD,CAA5C;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI,QAAC,SAAD;AAAA,6BACI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAII,QAAC,OAAD;AACI,MAAA,UAAU,EAAIM,UADlB;AAEI,MAAA,UAAU,EAAIQ,UAFlB;AAGI,MAAA,aAAa,EAAIC,aAHrB;AAII,MAAA,aAAa,EAAIR,aAJrB;AAKI,MAAA,IAAI,EAAIS,IALZ;AAMI,MAAA,MAAM,EAAIP,MANd;AAOI,MAAA,aAAa,EAAIE,aAPrB;AAQI,MAAA,WAAW,EAAIC,WARnB;AASI,MAAA,cAAc,EAAIC;AATtB;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CA7BD;;GAAMR,G;;KAAAA,G;AA+BN,eAAeA,GAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import './App.css';\nimport React, {useState, useEffect} from 'react';\nimport Container from './components/Container';\nimport Title from './components/Title';\nimport Options from './components/Options';\n\nconst App = () => {\n//  Defined all the states we needed in the project.\n    const [paragraphs, setParagraphs] = useState([]);\n    const [tag, setTag] = useState(\"p\");\n    const [inputValue, setInputValue] = useState(1);\n    const [includeHtml, setIncludeHtml] = useState(\"Yes\");\n    const [copiedCode, setCopiedCode] = useState(false);\n\n    return (\n        <div className=\"App\">\n            <Container>\n                <Title />\n            </Container>\n            <Options\n                paragraphs = {paragraphs}\n                copiedCode = {copiedCode}\n                setCopiedCode = {setCopiedCode}\n                setParagraphs = {setParagraphs}\n                tags = {tags}\n                setTag = {setTag}\n                setInputValue = {setInputValue}\n                includeHtml = {includeHtml}\n                setIncludeHtml = {setIncludeHtml}\n\n\n\n            />\n        </div>\n    )\n}\n\nexport default App;\n\n//            While making container component we have made a parameter passing, which is title here and will be rendered like this\n//            <div className=\"container\">\n//            <div className=\"title\">\n//                <h1>Lorem Ipsum Generator</h1>\n//            </div>\n//            </div>\n\n//Single component is render with <component /> whereas parameterised/nested component is rendered as <component></component>"]},"metadata":{},"sourceType":"module"}